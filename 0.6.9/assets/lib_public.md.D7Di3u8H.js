import{_ as n,C as p,c as o,o as h,j as i,a,az as e,G as l}from"./chunks/framework.DH60Q5R3.js";const A=JSON.parse('{"title":"Public Interface","description":"","frontmatter":{},"headers":[],"relativePath":"lib/public.md","filePath":"lib/public.md","lastUpdated":null}'),r={name:"lib/public.md"},k={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function E(m,s,b,f,F,C){const t=p("Badge");return h(),o("div",null,[s[18]||(s[18]=i("h1",{id:"Public-Interface",tabindex:"-1"},[a("Public Interface "),i("a",{class:"header-anchor",href:"#Public-Interface","aria-label":'Permalink to "Public Interface {#Public-Interface}"'},"​")],-1)),s[19]||(s[19]=i("h2",{id:"Prototypes-Module",tabindex:"-1"},[i("code",null,"Prototypes"),a(" Module "),i("a",{class:"header-anchor",href:"#Prototypes-Module","aria-label":'Permalink to "`Prototypes` Module {#Prototypes-Module}"'},"​")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Prototypes.custom_logger-Tuple{Prototypes.LogSink}",href:"#Prototypes.custom_logger-Tuple{Prototypes.LogSink}"},[i("span",{class:"jlbinding"},"Prototypes.custom_logger")],-1)),s[1]||(s[1]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">custom_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>filename::AbstractString</code>: base name for the log files</p></li><li><p><code>output_dir::AbstractString=./log/</code>: name of directory where log files are written</p></li><li><p><code>filtered_modules_specific::Vector{Symbol}=nothing</code>: which modules do you want to filter out of logging (only for info and stdout) Some packages just write too much log ... filter them out but still be able to check them out in other logs</p></li><li><p><code>filtered_modules_all::Vector{Symbol}=nothing</code>: which modules do you want to filter out of logging (across all logs) Examples could be TranscodingStreams (noticed that it writes so much to logs that it sometimes slows down I/O)</p></li><li><p><code>file_loggers::Union{Symbol, Vector{Symbol}}=[:error, :warn, :info, :debug]</code>: which file logger to register</p></li><li><p><code>log_date_format::AbstractString=&quot;yyyy-mm-dd&quot;</code>: time stamp format at beginning of each logged lines for dates</p></li><li><p><code>log_time_format::AbstractString=&quot;HH:MM:SS&quot;</code>: time stamp format at beginning of each logged lines for times</p></li><li><p><code>displaysize::Tuple{Int,Int}=(50,100)</code>: how much to show on log (same for all logs for now!)</p></li><li><p><code>log_format::Symbol=:log4j</code>: how to format the log files; I have added an option for pretty (all or nothing for now)</p></li><li><p><code>log_format_stdout::Symbol=:pretty</code>: how to format the stdout; default is pretty</p></li><li><p><code>overwrite::Bool=false</code>: do we overwrite previously created log files</p></li></ul><p>The custom_logger function creates four files in <code>output_dir</code>for four different levels of logging: from least to most verbose:<code>filename.info.log.jl</code>,<code>filename.warn.log.jl</code>,<code>filename.debug.log.jl</code>,<code>filename.full.log.jl</code>The debug logging offers the option to filter messages from specific packages (some packages are particularly verbose) using the<code>filter</code> optional argument The full logging gets all of the debug without any of the filters. Info and warn log the standard info and warning level logging messages.</p><p>Note that the default <strong>overwrites</strong> old log files (specify overwrite=false to avoid this).</p><p><a href="https://github.com/eloualiche/Prototypes.jl/blob/7d216bff9b9486f752838cae9fde8a17513ea3da/src/CustomLogger.jl#L72-L98" target="_blank" rel="noreferrer">source</a></p>',6))]),i("details",d,[i("summary",null,[s[3]||(s[3]=i("a",{id:"Prototypes.panel_fill!-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}",href:"#Prototypes.panel_fill!-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}"},[i("span",{class:"jlbinding"},"Prototypes.panel_fill!")],-1)),s[4]||(s[4]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">panel_fill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Same </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> panel_fill but with modification </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> place</span></span></code></pre></div><p><a href="https://github.com/eloualiche/Prototypes.jl/blob/7d216bff9b9486f752838cae9fde8a17513ea3da/src/PanelData.jl#L151-L156" target="_blank" rel="noreferrer">source</a></p>`,2))]),i("details",g,[i("summary",null,[s[6]||(s[6]=i("a",{id:"Prototypes.panel_fill-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}",href:"#Prototypes.panel_fill-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}"},[i("span",{class:"jlbinding"},"Prototypes.panel_fill")],-1)),s[7]||(s[7]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">panel_fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    time_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Symbol, Vector{Symbol}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Int, DatePeriod}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :backwards</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uniquecheck</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>df::AbstractDataFrame</code>: a panel dataset</p></li><li><p><code>id_var::Symbol</code>: the individual index dimension of the panel</p></li><li><p><code>time_var::Symbol</code>: the time index dimension of the panel (must be integer or a date)</p></li><li><p><code>value_var::Union{Symbol, Vector{Symbol}}</code>: the set of columns we would like to fill</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>gap::Union{Int, DatePeriod} = 1</code> : the interval size for which we want to fill data</p></li><li><p><code>method::Symbol = :backwards</code>: the interpolation method to fill the data options are: <code>:backwards</code> (default), <code>:forwards</code>, <code>:linear</code>, <code>:nearest</code> email me for other interpolations (anything from Interpolations.jl is possible)</p></li><li><p><code>uniquecheck::Bool = true</code>: check if panel is clean</p></li><li><p><code>flag::Bool = false</code>: flag the interpolated values</p></li><li><p><code>merge::Bool = false</code>: merge the new values with the input dataset</p></li></ul><p><strong>Returns</strong></p><ul><li><code>AbstractDataFrame</code>:</li></ul><p><strong>Examples</strong></p><ul><li>See tests</li></ul><p><a href="https://github.com/eloualiche/Prototypes.jl/blob/7d216bff9b9486f752838cae9fde8a17513ea3da/src/PanelData.jl#L2-L35" target="_blank" rel="noreferrer">source</a></p>`,10))]),i("details",c,[i("summary",null,[s[9]||(s[9]=i("a",{id:"Prototypes.tabulate-Tuple{DataFrames.AbstractDataFrame, Union{Symbol, Vector{Symbol}}}",href:"#Prototypes.tabulate-Tuple{DataFrames.AbstractDataFrame, Union{Symbol, Vector{Symbol}}}"},[i("span",{class:"jlbinding"},"Prototypes.tabulate")],-1)),s[10]||(s[10]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Symbol, Array{Symbol}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reorder_cols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:stdout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This was forked from TexTables.jl and was inspired by <a href="https://github.com/matthieugomez/statar" target="_blank" rel="noreferrer">https://github.com/matthieugomez/statar</a></p><p><strong>Arguments</strong></p><ul><li><p><code>df::AbstractDataFrame</code>: Input DataFrame to analyze</p></li><li><p><code>cols::Union{Symbol, Vector{Symbol}}</code>: Single column name or vector of column names to tabulate</p></li><li><p><code>group_type::Union{Symbol, Vector{Symbol}}=:value</code>: Specifies how to group each column:</p><ul><li><p><code>:value</code>: Group by the actual values in the column</p></li><li><p><code>:type</code>: Group by the type of values in the column</p></li><li><p><code>Vector{Symbol}</code>: Vector combining <code>:value</code> and <code>:type</code> for different columns</p></li></ul></li><li><p><code>reorder_cols::Bool=true</code> Whether to sort the output by sortable columns</p></li><li><p><code>format_tbl::Symbol=:long</code> How to present the results long or wide (stata twoway)</p></li><li><p><code>format_stat::Symbol=:freq</code> Which statistics to present for format :freq or :pct</p></li><li><p><code>skip_stat::Union{Nothing, Symbol, Vector{Symbol}}=nothing</code> do not print out all statistics (only for string)</p></li><li><p><code>out::Symbol=:stdout</code> Output format:</p><ul><li><p><code>:stdout</code> Print formatted table to standard output (returns nothing)</p></li><li><p><code>:df</code> Return the result as a DataFrame</p></li><li><p><code>:string</code> Return the formatted table as a string</p></li></ul></li></ul><p><strong>Returns</strong></p><ul><li><p><code>Nothing</code> if <code>out=:stdout</code></p></li><li><p><code>DataFrame</code> if <code>out=:df</code></p></li><li><p><code>String</code> if <code>out=:string</code></p></li></ul><p><strong>Output Format</strong></p><p>The resulting table contains the following columns:</p><ul><li><p>Specified grouping columns (from <code>cols</code>)</p></li><li><p><code>freq</code>: Frequency count</p></li><li><p><code>pct</code>: Percentage of total</p></li><li><p><code>cum</code>: Cumulative percentage</p></li></ul><p><strong>TO DO</strong></p><p>allow user to specify order of columns (reorder = false flag)</p><p><strong>Examples</strong></p><p>See the README for more examples</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Simple frequency table for one column</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Group by value type</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, group_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multiple columns with mixed grouping</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], group_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Return as DataFrame instead of printing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:df</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/eloualiche/Prototypes.jl/blob/7d216bff9b9486f752838cae9fde8a17513ea3da/src/StataUtils.jl#L18-L72" target="_blank" rel="noreferrer">source</a></p>`,15))]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:"Prototypes.winsorize-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T",href:"#Prototypes.winsorize-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T"},[i("span",{class:"jlbinding"},"Prototypes.winsorize")],-1)),s[13]||(s[13]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">winsorize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    probs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Tuple{Real, Real}, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cutpoints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Tuple{Real, Real}, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    replace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :missing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><code>x::AbstractVector</code>: a vector of values</li></ul><p><strong>Keywords</strong></p><ul><li><p><code>probs::Union{Tuple{Real, Real}, Nothing}</code>: A vector of probabilities that can be used instead of cutpoints</p></li><li><p><code>cutpoints::Union{Tuple{Real, Real}, Nothing}</code>: Cutpoints under and above which are defined outliers. Default is (median - five times interquartile range, median + five times interquartile range). Compared to bottom and top percentile, this takes into account the whole distribution of the vector</p></li><li><p><code>replace_value::Tuple</code>: Values by which outliers are replaced. Default to cutpoints. A frequent alternative is missing.</p></li><li><p><code>IQR::Real</code>: when inferring cutpoints what is the multiplier from the median for the interquartile range. (median ± IQR * (q75-q25))</p></li><li><p><code>verbose::Bool</code>: printing level</p></li></ul><p><strong>Returns</strong></p><ul><li><code>AbstractVector</code>: A vector the size of x with substituted values</li></ul><p><strong>Examples</strong></p><ul><li>See tests</li></ul><p>This code is based on Matthieu Gomez winsorize function in the <code>statar</code> R package</p><p><a href="https://github.com/eloualiche/Prototypes.jl/blob/7d216bff9b9486f752838cae9fde8a17513ea3da/src/Winsorize.jl#L2-L28" target="_blank" rel="noreferrer">source</a></p>`,11))]),i("details",y,[i("summary",null,[s[15]||(s[15]=i("a",{id:"Prototypes.xtile-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Real",href:"#Prototypes.xtile-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Real"},[i("span",{class:"jlbinding"},"Prototypes.xtile")],-1)),s[16]||(s[16]=a()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[17]||(s[17]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xtile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_quantiles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{Float64}, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Real</span></span></code></pre></div><p>Create quantile groups using Julia&#39;s built-in weighted quantile functionality.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: Values to group</p></li><li><p><code>n_quantiles</code>: Number of groups</p></li><li><p><code>weights</code>: Optional weights of weight type (StatasBase)</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sales </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xtile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sales, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xtile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sales, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Weights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sales))) );</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><p><a href="https://github.com/eloualiche/Prototypes.jl/blob/7d216bff9b9486f752838cae9fde8a17513ea3da/src/StataUtils.jl#L436-L454" target="_blank" rel="noreferrer">source</a></p>`,7))])])}const D=n(r,[["render",E]]);export{A as __pageData,D as default};
